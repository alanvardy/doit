defmodule Doit.Todoist.Notification do
  @moduledoc """
  Regularly scheduled items generated in this app and sent through todoist
  Excludes items generated by external services such as GitHub
  """
  use Ecto.Schema
  import Ecto.Changeset
  import Ecto.Query

  @timestamps_opts [type: :utc_datetime]
  @twenty_four_hours 60 * 60 * -24

  @type type :: :last_24 | :last_week

  schema "notifications" do
    field :type, Ecto.Enum, values: [:last_24, :last_week]
    field :data, :map

    timestamps()
  end

  @spec changeset(%{type: type, data: map}) :: Ecto.Changeset.t()
  @doc false
  def changeset(attrs) do
    %__MODULE__{}
    |> cast(attrs, [:type, :data])
    |> validate_required([:type, :data])
  end

  @spec where_type(type) :: Ecto.Query.t()
  @spec where_type(Ecto.Queryable.t(), type) :: Ecto.Query.t()
  def where_type(queryable \\ __MODULE__, type) do
    where(queryable, [q], q.type == ^type)
  end

  @spec where_created_last_24_hours :: Ecto.Query.t()
  @spec where_created_last_24_hours(Ecto.Queryable.t()) :: Ecto.Query.t()
  @spec where_created_last_24_hours(Ecto.Queryable.t(), keyword) :: Ecto.Query.t()
  def where_created_last_24_hours(queryable \\ __MODULE__, opts \\ []) do
    if Keyword.get(opts, :current_datetime) do
      queryable
    else
      twenty_four_hours_ago = DateTime.add(DateTime.utc_now(), @twenty_four_hours)
      where(queryable, [q], q.inserted_at >= ^twenty_four_hours_ago)
    end
  end

  @spec order_by_inserted_at :: Ecto.Query.t()
  @spec order_by_inserted_at(Ecto.Queryable.t()) :: Ecto.Query.t()
  def order_by_inserted_at(queryable \\ __MODULE__) do
    order_by(queryable, [q], desc: q.inserted_at)
  end

  @spec select_inserted_at :: Ecto.Query.t()
  @spec select_inserted_at(Ecto.Queryable.t()) :: Ecto.Query.t()
  def select_inserted_at(queryable \\ __MODULE__) do
    select(queryable, [q], q.inserted_at)
  end
end
